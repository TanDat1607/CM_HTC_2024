<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_Motor_Sensor" Id="{fb82d031-f928-4fe6-805c-8e0d308a101b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Motor_Sensor
VAR
	//Motor read
	state_mt	: INT;
	Data_mt_1	: ARRAY[0..2] OF INT;//0:Output_frequency_monitor 1:Output_current_monitor 2:Rotation_direction_monitor
	Data_mt_2	: INT;//temperature
	Data_mt_3	: INT;//voltage
	Data_mt_4	: INT;//Power_on - hour 
	Data_mt_5	: INT;//Limit Frequency
	//Motor write
	run_temp 							: BOOL;
	Rotation_direction_temp				: BOOL;
	Frequence_temp						: REAL;//Hz
	Acceleration_time_temp				: REAL;//s
	Deceleration_time_temp				: REAL;//s
	//Datawrite_mt_1						: ARRAY[0..1] OF BOOL;
	Datawrite_mt_2						: INT;//Frequence
	Datawrite_mt_3						: ARRAY[0..3] OF INT;//acc vs dec
	// Sensor
	Rev_T		: R_TRIG;
	state_ss	: INT;
	pulse		: INT;
	i			: INT := 1;
	data		: INT;
	rpm			: REAL;
	timer		: TON;
	fb_Modbus	: ModbusRtuMaster_KL6x22B;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Motor();
Sensor();
Output_frequency_monitor			:= INT_TO_REAL(Data_mt_1[0])/100;//Hz
Output_current_monitor				:= INT_TO_REAL(Data_mt_1[1])/100;//A
IF (Data_mt_1[2] = 0) THEN
	Rotation_direction_monitor		:= 'Stop';
ELSIF (Data_mt_1[2] = 1) THEN			
	Rotation_direction_monitor		:= '0Hz';
ELSIF (Data_mt_1[2] = 2) THEN
	Rotation_direction_monitor		:= 'Forward';
ELSIF (Data_mt_1[2] = 3) THEN
	Rotation_direction_monitor		:= 'Reverse';
END_IF
Inverter_Temperature				:= INT_TO_REAL(Data_mt_2)/10;//C
Inverter_Voltage_Output				:= INT_TO_REAL(Data_mt_3)/10;//V
Power_on_time_monitor				:= Data_mt_4;//hour
UpperLimit_frequency_monitor		:= INT_TO_REAL(Data_mt_5)/100;//V]]></ST>
    </Implementation>
    <Action Name="Motor" Id="{00535d9d-e168-4f2f-a21e-71315020fd40}">
      <Implementation>
        <ST><![CDATA[CASE state_mt OF
	0://init
			run_temp					:= Run_Motor;
			Rotation_direction_temp		:= Rotation_direction;
			Frequence_temp				:= Frequence;
			Acceleration_time_temp		:= Acceleration_time;
			Deceleration_time_temp		:= Deceleration_time;
			state_mt 					:= 1;
	1://read data1
		fb_Modbus.ReadRegs(
				UnitID:= 1, 
				Quantity:= 3, 
				MBAddr:= 10000, 
				cbLength:= SIZEOF(Data_mt_1), 
				pMemoryAddr:= ADR(Data_mt_1), 
				Execute:= TRUE, 
				Timeout:= T#1S, 
				BUSY=> , 
				Error=> , 
				ErrorId=> , 
				cbRead=> ); 
		IF NOT fb_Modbus.BUSY AND NOT fb_Modbus.Error THEN
			fb_Modbus.ReadRegs(Execute:= FALSE); 
			state_mt 			:= 2;
		END_IF
	2://read data2
		fb_Modbus.ReadRegs(
			UnitID:= 1, 
			Quantity:= 1, 
			MBAddr:= 10214, 
			cbLength:= SIZEOF(Data_mt_2), 
			pMemoryAddr:= ADR(Data_mt_2), 
			Execute:= TRUE, 
			Timeout:= T#1S, 
			BUSY=> , 
			Error=> , 
			ErrorId=> , 
			cbRead=> );
		IF NOT fb_Modbus.BUSY AND NOT fb_Modbus.Error THEN
			fb_Modbus.ReadRegs(Execute:= FALSE);
			state_mt 			:= 3;
		END_IF
	3://read data3
		fb_Modbus.ReadRegs(
			UnitID:= 1, 
			Quantity:= 1, 
			MBAddr:= 10017, 
			cbLength:= SIZEOF(Data_mt_3), 
			pMemoryAddr:= ADR(Data_mt_3), 
			Execute:= TRUE, 
			Timeout:= T#1S, 
			BUSY=> , 
			Error=> , 
			ErrorId=> , 
			cbRead=> );
		IF NOT fb_Modbus.BUSY AND NOT fb_Modbus.Error THEN
			fb_Modbus.ReadRegs(Execute:= FALSE);
			state_mt 			:= 4;
		END_IF
	4://read data4
		fb_Modbus.ReadRegs(
			UnitID:= 1, 
			Quantity:= 1, 
			MBAddr:= 10224, 
			cbLength:= SIZEOF(Data_mt_4), 
			pMemoryAddr:= ADR(Data_mt_4), 
			Execute:= TRUE, 
			Timeout:= T#1S, 
			BUSY=> , 
			Error=> , 
			ErrorId=> , 
			cbRead=> );
		IF NOT fb_Modbus.BUSY AND NOT fb_Modbus.Error THEN
			fb_Modbus.ReadRegs(Execute:= FALSE);
			state_mt 			:= 5;
		END_IF
	5://read data4
		fb_Modbus.ReadRegs(
			UnitID:= 1, 
			Quantity:= 1, 
			MBAddr:= 10013, 
			cbLength:= SIZEOF(Data_mt_5), 
			pMemoryAddr:= ADR(Data_mt_5), 
			Execute:= TRUE, 
			Timeout:= T#1S, 
			BUSY=> , 
			Error=> , 
			ErrorId=> , 
			cbRead=> );
		IF NOT fb_Modbus.BUSY AND NOT fb_Modbus.Error THEN
			fb_Modbus.ReadRegs(Execute:= FALSE);
			state_mt 			:= 6;
		END_IF
	6://check write run
		IF (Run_Motor <> run_temp) THEN
			state_mt 			:= 60;//write run
		ELSE
			state_mt 			:= 7;
		END_IF
	7:// check frequence
		IF (Frequence <> Frequence_temp) THEN
			state_mt 			:= 70;//write frequence
		ELSE
			state_mt 			:= 8;
		END_IF
	8://check Acc vs Dec time
		IF (Acceleration_time <> Acceleration_time_temp) OR (Deceleration_time <> Deceleration_time_temp) THEN
			state_mt 			:= 80;//write acc and dec
		ELSE
			state_mt 			:= 9; 
		END_IF
	9://
		IF (Rotation_direction <> Rotation_direction_temp) THEN
			state_mt 			:= 90;
		ELSE
			state_mt 			:= 1;
		END_IF
	//=============================================
	60://write run
		fb_Modbus.WriteSingleCoil(
			UnitID:= 1, 
			Quantity:= 1, 
			MBAddr:= 0, 
			cbLength:= SIZEOF(Run_Motor), 
			pMemoryAddr:= ADR(Run_Motor), 
			Execute:= TRUE, 
			Timeout:= T#1S, 
			BUSY=> , 
			Error=> , 
			ErrorId=> , 
			cbRead=> );
		IF NOT fb_Modbus.BUSY AND NOT fb_Modbus.Error THEN
			fb_Modbus.WriteSingleCoil(Execute := FALSE);
			run_temp							 := Run_Motor;
			state_mt 							 := 7;//return
		END_IF
	70://write Freq
		Datawrite_mt_2 := REAL_TO_INT(Frequence*100);
		fb_Modbus.WriteRegs(
			UnitID:= 1, 
			Quantity:= 1, 
			MBAddr:= 11000, 
			cbLength:= SIZEOF(Datawrite_mt_2), 
			pMemoryAddr:= ADR(Datawrite_mt_2), 
			Execute:= TRUE, 
			Timeout:= T#1S, 
			BUSY=> , 
			Error=> , 
			ErrorId=> , 
			cbRead=> );
		IF NOT fb_Modbus.BUSY AND NOT fb_Modbus.Error THEN
			fb_Modbus.WriteRegs(Execute := FALSE);
			Frequence_temp				:= Frequence;
			state_mt 					:= 8;//return
		END_IF
	80://write acc vs dec
		Datawrite_mt_3[0] := REAL_TO_INT(Acceleration_time*100);
		Datawrite_mt_3[1] := 0;
		Datawrite_mt_3[2] := REAL_TO_INT(Deceleration_time_temp*100);
		Datawrite_mt_3[3] := 0;
		fb_Modbus.WriteRegs(
			UnitID:= 1, 
			Quantity:= 4, 
			MBAddr:= 11010, 
			cbLength:= SIZEOF(Datawrite_mt_3), 
			pMemoryAddr:= ADR(Datawrite_mt_3), 
			Execute:= TRUE, 
			Timeout:= T#1S, 
			BUSY=> , 
			Error=> , 
			ErrorId=> , 
			cbRead=> );
		IF NOT fb_Modbus.BUSY AND NOT fb_Modbus.Error THEN
			fb_Modbus.WriteRegs(Execute := FALSE);
			Acceleration_time_temp		:= Acceleration_time;
			Deceleration_time_temp		:= Deceleration_time;
			state_mt 					:= 9;
		END_IF
	90://
		fb_Modbus.WriteSingleCoil(
			UnitID:= 1, 
			Quantity:= 1, 
			MBAddr:= 1, 
			cbLength:= SIZEOF(Rotation_direction), 
			pMemoryAddr:= ADR(Rotation_direction), 
			Execute:= TRUE, 
			Timeout:= T#1S, 
			BUSY=> , 
			Error=> , 
			ErrorId=> , 
			cbRead=> );
		IF NOT fb_Modbus.BUSY AND NOT fb_Modbus.Error THEN
			fb_Modbus.WriteSingleCoil(Execute := FALSE);
			Rotation_direction_temp				 := Rotation_direction;
			state_mt 							 := 1;//return
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Sensor" Id="{b2578ac5-aa78-464e-b21a-a21f3ef4fc59}">
      <Implementation>
        <ST><![CDATA[Rev_T( CLK := bRev);
IF Rev_T.Q THEN
	pulse	:= pulse + 1;	
END_IF
CASE state_ss OF
	0:
		timer( IN := TRUE, PT := T#1S);
		IF timer.Q THEN
			data  := pulse;
			timer( IN := FALSE);
			state_ss := 1;
		END_IF
	1:
		rpm	:= data*60;
		pulse	:= 0;
		state_ss := 0;
END_CASE
iActSpeed	:= REAL_TO_INT(rpm);
Temperature_motor	:= (INT_TO_REAL(iTemp)/32767)*1000;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="PRG_Motor_Sensor">
      <LineId Id="35" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="218" Count="10" />
      <LineId Id="217" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="262" Count="0" />
    </LineIds>
    <LineIds Name="PRG_Motor_Sensor.Motor">
      <LineId Id="1" Count="1" />
      <LineId Id="98" Count="3" />
      <LineId Id="97" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="232" Count="10" />
      <LineId Id="231" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="225" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="14" />
      <LineId Id="73" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="353" Count="14" />
      <LineId Id="351" Count="0" />
      <LineId Id="369" Count="15" />
      <LineId Id="368" Count="0" />
      <LineId Id="386" Count="15" />
      <LineId Id="385" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="106" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="131" Count="3" />
      <LineId Id="130" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="157" Count="3" />
      <LineId Id="156" Count="0" />
      <LineId Id="303" Count="1" />
      <LineId Id="309" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="110" Count="13" />
      <LineId Id="161" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="139" Count="13" />
      <LineId Id="163" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="347" Count="2" />
      <LineId Id="168" Count="14" />
      <LineId Id="184" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="330" Count="16" />
      <LineId Id="329" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="PRG_Motor_Sensor.Sensor">
      <LineId Id="3" Count="16" />
      <LineId Id="1" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>